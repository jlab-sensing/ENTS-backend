name: Create new deployment

on:
  # pull_request:
  #   types: [opened, reopened, synchronize]
  workflow_dispatch:

env:
  DB_HOST: ${{ secrets.DB_HOST }}
  DB_PASS: ${{ secrets.DB_PASS }}
  DB_PORT: ${{ secrets.DB_PORT }}
  DB_USER: ${{ secrets.DB_USER }}
  DB_DATABASE: ${{ github.ref_name }}

jobs:
  create_namespace:
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'branch' }}
    environment: ${{ github.ref_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup SSH
        shell: bash
        env:
          SERVER_SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SERVER_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "$SERVER_SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Generate namespace.yaml
        uses: cuchi/jinja2-action@v1.3.0
        with:
          template: k8s/namespace.yaml.j2
          output_file: k8s/namespace.yaml

      - name: Apply configurations
        shell: bash
        run: |
          cat k8s/namespace.yaml | \
          ssh ${{ secrets.USER }}@${{ secrets.HOSTNAME }} \
          '/snap/bin/microk8s kubectl apply -f -'

  create_database:
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'branch' }}
    environment: ${{ github.ref_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup SSH
        shell: bash
        env:
          SERVER_SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh/
          echo "$SERVER_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          echo "$SERVER_SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
          chmod 600 ~/.ssh/known_hosts

      - name: Create database
        shell: bash
        run: |
          ssh ${{ secrets.USER }}@${{ secrets.HOSTNAME }} 'createdb ${{ github.ref_name }}'

  populate_database:
    runs-on: ubuntu-latest
    if: ${{ github.ref_type == 'branch' }}
    needs: [create_database]
    environment: ${{ github.ref_name }}

    steps:
      - name: Checkout
        uses: actions/checkout@v5

      - name: Setup python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run migrations
        run: flask --app backend.api db migrate -d ./backend/api/migrations

      - name: Import example data
        run: python import_example_data.py
